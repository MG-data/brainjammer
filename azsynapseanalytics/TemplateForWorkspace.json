{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "azsynapseanalytics"
		},
		"AzureFileStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureFileStorage1'"
		},
		"BrainjammerAzureSQL_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'BrainjammerAzureSQL'"
		},
		"BrainjammerCosmosDb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'BrainjammerCosmosDb'"
		},
		"azsynapseanalytics-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azsynapseanalytics-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:azsynapseanalytics.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"BrainjammerAzureSQL_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "csharpguitar-azsqldb.database.windows.net"
		},
		"BrainjammerAzureSQL_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "brainjammer"
		},
		"BrainjammerAzureSQL_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Daria"
		},
		"azsynapseanalytics-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://csharpguitarpublic.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Ch05Ex06')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "SplitBrainjammerBrainwavesCSV",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Ch05Ex06",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BrainjammerBrainwavesCSV": {},
									"BrainjammerBrainwavesSplitCSV": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Ch05Ex06')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IngestTmpReading')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveToTmpReading",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BrainwavesReadingServingLayer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BrainwavesReading": {},
									"brainjammerTmpReading": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "azsynapseanalytics-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "brainjammer/staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreatePopulateFactReading",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "MoveToTmpReading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "SQLPool",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[brainwaves].[uspCreateAndPopulateFactReading]"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/BrainwavesReadingServingLayer')]",
				"[concat(variables('workspaceId'), '/linkedServices/azsynapseanalytics-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/sqlPools/SQLPool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IngestTransformBrainwavesReadingSpark')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveToTmpReading",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Ch05Ex03",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BrainwavesREADING": {},
									"brainjammerTmpReading": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TransformReadingParquet",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "MoveToTmpReading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Ch05Ex03",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkPool",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Ch05Ex03')]",
				"[concat(variables('workspaceId'), '/notebooks/Ch05Ex03')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SparkPool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TransformEnrichment')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "DropTable",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "azsynapseanalytics-WorkspaceDefaultSqlServer",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": "SQLPool"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID (N'brainwaves.FactREADING', N'U') IS NOT NULL\n DROP TABLE [brainwaves].[FactREADING]\nIF OBJECT_ID (N'brainwaves.SCENARIO_FREQUENCY', N'U') IS NOT NULL\n DROP TABLE [brainwaves].[SCENARIO_FREQUENCY]"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "SETUP Staging",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DropTable",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "azsynapseanalytics-WorkspaceDefaultSqlServer",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": "SQLPool"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID (N'staging.TmpREADING', N'U') IS NOT NULL\n DELETE FROM [staging].[TmpREADING]\nELSE\n  CREATE TABLE [staging].[TmpREADING]\n  ( \n    [READING_ID] [int]  NOT NULL,\n    [SESSION_ID] [int]  NOT NULL,\n    [ELECTRODE_ID] [int]  NOT NULL,\n    [FREQUENCY_ID] [int]  NOT NULL,\n    [READING_DATETIME] [datetime]  NOT NULL,\n    [COUNT] [int]  NOT NULL,\n    [VALUE] [decimal](8,3)  NOT NULL\n  )\n  WITH\n  (\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n  )"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Filter Outliers",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SETUP Staging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Ch05Ex13F",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TmpREADING": {},
									"StagedTmpREADING": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "azsynapseanalytics-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "brainjammer/staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CREATE FactREADING",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "azsynapseanalytics-WorkspaceDefaultSqlServer",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": "SQLPool"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "CREATE TABLE [brainwaves].[FactREADING]\n  WITH\n  (\n    CLUSTERED COLUMNSTORE INDEX,\n    DISTRIBUTION = HASH ([FREQUENCY])\n  )\n    AS\n    SELECT  se.SESSION_DATETIME, r.READING_DATETIME, \n            s.SCENARIO, e.ELECTRODE, f.FREQUENCY, r.[VALUE]\n    FROM    [brainwaves].[DimSESSION] se, [staging].[TmpREADING] r, \n            [brainwaves].[DimSCENARIO] s, [brainwaves].[DimELECTRODE] e, \n            [brainwaves].[DimFREQUENCY] f\n    WHERE   r.SESSION_ID = se.SESSION_ID AND se.SCENARIO_ID = s.SCENARIO_ID \n            AND r.ELECTRODE_ID = e.ELECTRODE_ID AND r.FREQUENCY_ID = f.FREQUENCY_ID"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "CONVERT Parquet",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "CREATE FactREADING",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Ch05Ex13TB",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkPool",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					},
					{
						"name": "AGGREGATE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CREATE FactREADING",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "azsynapseanalytics-WorkspaceDefaultSqlServer",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": "SQLPool"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID (N'brainwaves.SCENARIO_FREQUENCY', N'U') IS NOT NULL\n DROP TABLE [SCENARIO_FREQUENCY].[SCENARIO_FREQUENCY]\n\nCREATE TABLE [brainwaves].[SCENARIO_FREQUENCY]\nWITH\n(\n  CLUSTERED COLUMNSTORE INDEX,\n  DISTRIBUTION = REPLICATE\n)\nAS\nSELECT DISTINCT SCENARIO, FREQUENCY,\n       AVG([VALUE]) OVER (partition by SCENARIO, FREQUENCY) as AVERAGE,\n       STDEV([VALUE]) OVER (partition by SCENARIO, FREQUENCY) as STANDARDDEV,\n       VAR([VALUE]) OVER (partition by SCENARIO, FREQUENCY) as VARIANCE,\n       PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) \n          OVER (partition by SCENARIO, FREQUENCY) as MEDIAN,\n       SQRT(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) \n          OVER (partition by SCENARIO, FREQUENCY)) AS SQUAREROOT,\n       SQUARE(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) \n          OVER (partition by SCENARIO, FREQUENCY)) AS SQUARED\nFROM brainwaves.FactREADING"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "NORMALIZE",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "AGGREGATE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Ch05Ex13N",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkPool",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azsynapseanalytics-WorkspaceDefaultSqlServer')]",
				"[concat(variables('workspaceId'), '/dataflows/Ch05Ex13F')]",
				"[concat(variables('workspaceId'), '/linkedServices/azsynapseanalytics-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/notebooks/Ch05Ex13TB')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SparkPool')]",
				"[concat(variables('workspaceId'), '/notebooks/Ch05Ex13N')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsstagedTmpREADING')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azsynapseanalytics-WorkspaceDefaultSqlServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"DBName": "SQLPool"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "staging",
					"table": "TmpREADING"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azsynapseanalytics-WorkspaceDefaultSqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BrainjammerAzureSQLREADING')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BrainjammerAzureSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "READING_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SESSION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ELECTRODE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FREQUENCY_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "READING_DATETIME",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "COUNT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "VALUE",
						"type": "decimal",
						"precision": 7,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "READING"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/BrainjammerAzureSQL')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BrainjammerBrainwavesCSV')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azsynapseanalytics-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "BrainjammerBrainwaves.csv",
						"folderPath": "EMEA/brainjammer/in/2022/04/26/17",
						"fileSystem": "brainjammer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azsynapseanalytics-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BrainjammerBrainwavesSplitCSV')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azsynapseanalytics-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "EMEA/brainjammer/out/2022/04/28/12",
						"fileSystem": "brainjammer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azsynapseanalytics-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BrainjammerBrainwavesTmpParquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azsynapseanalytics-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "EMEA/brainjammer/in/2022/04/28/16",
						"fileSystem": "brainjammer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azsynapseanalytics-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SynapseTmpReading')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azsynapseanalytics-WorkspaceDefaultSqlServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"DBName": "SQLPool"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "READING_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SESSION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ELECTRODE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FREQUENCY_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "READING_DATETIME",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "COUNT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "VALUE",
						"type": "decimal",
						"precision": 8,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "brainwaves",
					"table": "TmpREADING"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azsynapseanalytics-WorkspaceDefaultSqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sampleBrainwavesParquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azsynapseanalytics-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "EMEA/brainjammer/out/2022/04/03/17/sampleBrainwaves.parquet",
						"fileSystem": "brainjammer"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Timestamp",
						"type": "UTF8"
					},
					{
						"name": "AF3theta",
						"type": "UTF8"
					},
					{
						"name": "AF3alpha",
						"type": "UTF8"
					},
					{
						"name": "AF3betaL",
						"type": "UTF8"
					},
					{
						"name": "AF3betaH",
						"type": "UTF8"
					},
					{
						"name": "AF3gamma",
						"type": "UTF8"
					},
					{
						"name": "T7theta",
						"type": "UTF8"
					},
					{
						"name": "T7alpha",
						"type": "UTF8"
					},
					{
						"name": "T7betaL",
						"type": "UTF8"
					},
					{
						"name": "T7betaH",
						"type": "UTF8"
					},
					{
						"name": "T7gamma",
						"type": "UTF8"
					},
					{
						"name": "Pztheta",
						"type": "UTF8"
					},
					{
						"name": "Pzalpha",
						"type": "UTF8"
					},
					{
						"name": "PzbetaL",
						"type": "UTF8"
					},
					{
						"name": "PzbetaH",
						"type": "UTF8"
					},
					{
						"name": "Pzgamma",
						"type": "UTF8"
					},
					{
						"name": "T8theta",
						"type": "UTF8"
					},
					{
						"name": "T8alpha",
						"type": "UTF8"
					},
					{
						"name": "T8betaL",
						"type": "UTF8"
					},
					{
						"name": "T8betaH",
						"type": "UTF8"
					},
					{
						"name": "T8gamma",
						"type": "UTF8"
					},
					{
						"name": "AF4theta",
						"type": "UTF8"
					},
					{
						"name": "AF4alpha",
						"type": "UTF8"
					},
					{
						"name": "AF4betaL",
						"type": "UTF8"
					},
					{
						"name": "AF4betaH",
						"type": "UTF8"
					},
					{
						"name": "AF4gamma",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azsynapseanalytics-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureFileStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureFileStorage1_connectionString')]",
					"fileShare": "brainjammer"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BrainjammerAzureSQL')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('BrainjammerAzureSQL_properties_typeProperties_server')]",
					"database": "[parameters('BrainjammerAzureSQL_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('BrainjammerAzureSQL_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('BrainjammerAzureSQL_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BrainjammerCosmosDb')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('BrainjammerCosmosDb_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azsynapseanalytics-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('azsynapseanalytics-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azsynapseanalytics-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('azsynapseanalytics-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BrainwavesReadingServingLayer')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BrainjammerAzureSQLREADING",
								"type": "DatasetReference"
							},
							"name": "BrainwavesReading"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SynapseTmpReading",
								"type": "DatasetReference"
							},
							"name": "brainjammerTmpReading"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          READING_ID as integer,",
						"          SESSION_ID as integer,",
						"          ELECTRODE_ID as integer,",
						"          FREQUENCY_ID as integer,",
						"          READING_DATETIME as timestamp,",
						"          COUNT as integer,",
						"          VALUE as decimal(7,3)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> BrainwavesReading",
						"BrainwavesReading sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          READING_ID as integer,",
						"          SESSION_ID as integer,",
						"          ELECTRODE_ID as integer,",
						"          FREQUENCY_ID as integer,",
						"          READING_DATETIME as timestamp,",
						"          COUNT as integer,",
						"          VALUE as decimal(8,3)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> brainjammerTmpReading"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BrainjammerAzureSQLREADING')]",
				"[concat(variables('workspaceId'), '/datasets/SynapseTmpReading')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ch05Ex03')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BrainjammerAzureSQLREADING",
								"type": "DatasetReference"
							},
							"name": "BrainwavesREADING"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "BrainjammerBrainwavesTmpParquet",
								"type": "DatasetReference"
							},
							"name": "brainjammerTmpReading"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          READING_ID as integer,",
						"          SESSION_ID as integer,",
						"          ELECTRODE_ID as integer,",
						"          FREQUENCY_ID as integer,",
						"          READING_DATETIME as timestamp,",
						"          COUNT as integer,",
						"          VALUE as decimal(7,3)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> BrainwavesREADING",
						"BrainwavesREADING sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> brainjammerTmpReading"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BrainjammerAzureSQLREADING')]",
				"[concat(variables('workspaceId'), '/datasets/BrainjammerBrainwavesTmpParquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ch05Ex06')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BrainjammerBrainwavesCSV",
								"type": "DatasetReference"
							},
							"name": "BrainjammerBrainwavesCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "BrainjammerBrainwavesSplitCSV",
								"type": "DatasetReference"
							},
							"name": "BrainjammerBrainwavesSplitCSV"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          SESSION_DATETIME as timestamp 'MM/dd/yyyy HH:mm:ss',",
						"          READING_DATETIME as timestamp 'MM/dd/yyyy HH:mm:ss',",
						"          SCENARIO as string,",
						"          ELECTRODE as string,",
						"          FREQUENCY as string,",
						"          VALUE as decimal(8,3) '000,000,000.000'",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BrainjammerBrainwavesCSV",
						"BrainjammerBrainwavesCSV sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('roundRobin', 60)) ~> BrainjammerBrainwavesSplitCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BrainjammerBrainwavesCSV')]",
				"[concat(variables('workspaceId'), '/datasets/BrainjammerBrainwavesSplitCSV')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ch05Ex13F')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SynapseTmpReading",
								"type": "DatasetReference"
							},
							"name": "TmpREADING"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsstagedTmpREADING",
								"type": "DatasetReference"
							},
							"name": "StagedTmpREADING"
						}
					],
					"transformations": [
						{
							"name": "Filteroutliers"
						}
					],
					"scriptLines": [
						"source(output(",
						"          READING_ID as integer,",
						"          SESSION_ID as integer,",
						"          ELECTRODE_ID as integer,",
						"          FREQUENCY_ID as integer,",
						"          READING_DATETIME as timestamp,",
						"          COUNT as integer,",
						"          VALUE as decimal(8,3)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> TmpREADING",
						"TmpREADING filter(VALUE > 0.274 && VALUE < 392) ~> Filteroutliers",
						"Filteroutliers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> StagedTmpREADING"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SynapseTmpReading')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsstagedTmpREADING')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Buildexternaldatabase')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE EXTERNAL DATA SOURCE SampleBrainwavesSource\nWITH (LOCATION = 'abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net')\n\nCREATE EXTERNAL FILE FORMAT SampleBrainwavesParquet\nWITH  (FORMAT_TYPE = PARQUET) \n\nCREATE EXTERNAL TABLE SampleBrainwaves\n(\n [Timestamp] NVARCHAR(50),\n [AF3theta] NVARCHAR(50),\n [AF3alpha] NVARCHAR(50),\n [AF3betaL] NVARCHAR(50),\n [AF3betaH] NVARCHAR(50),\n [AF3gamma] NVARCHAR(50),\n [T7theta] NVARCHAR(50),\n [T7alpha] NVARCHAR(50),\n [T7betaL] NVARCHAR(50),\n [T7betaH] NVARCHAR(50),\n [T7gamma] NVARCHAR(50),\n [Pztheta] NVARCHAR(50),\n [Pzalpha] NVARCHAR(50),\n [PzbetaL] NVARCHAR(50),\n [PzbetaH] NVARCHAR(50),\n [Pzgamma] NVARCHAR(50),\n [T8theta] NVARCHAR(50),\n [T8alpha] NVARCHAR(50),\n [T8betaL] NVARCHAR(50),\n [T8betaH] NVARCHAR(50),\n [T8gamma] NVARCHAR(50),\n [AF4theta] NVARCHAR(50),\n [AF4alpha] NVARCHAR(50),\n [AF4betaL] NVARCHAR(50),\n [AF4betaH] NVARCHAR(50),\n [AF4gamma] NVARCHAR(50)\n)\nWITH \n(\n LOCATION = 'EMEA/brainjammer/out/2022/04/03/*/*.parquet/*',\n DATA_SOURCE = SampleBrainwavesSource,\n FILE_FORMAT = SampleBrainwavesParquet\n)\n\nSELECT TOP 10 * FROM SampleBrainwaves",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "BRAINJAMMER",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ch04Ex05')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK (\n            'https://csharpguitarpublic.blob.core.windows.net/brainjammer/EMEA/brainjammer/in/2022/04/01/18/*.csv'\n        ),\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ch05Ex07')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP 10 Scenario, ReadingDate, \n        AF3THETA, AF3ALPHA, AF3BETA_L, AF3BETA_H, AF3GAMMA,\n        AF4THETA, AF4ALPHA, AF4BETA_L, AF4BETA_H, AF4GAMMA,\n        T7THETA, T7ALPHA, T7BETA_L, T7BETA_H, T7GAMMA,\n        T8THETA, T8ALPHA, T8BETA_L, T8BETA_H, T8GAMMA,\n        PzTHETA, PzALPHA, PzBETA_L, PzBETA_H, PzGAMMA\nFROM OPENROWSET(PROVIDER = 'CosmosDB',\n                CONNECTION = 'Account=csharpguitar-cosmosdb;Database=brainjammer;Key=Primary or Secondary in CosmoDB resource key tab',\n                OBJECT = 'sessions')\nWITH ( Scenario varchar(max) '$.Session.Scenario',  POWReading varchar(max) '$.Session.POWReading') AS readings\nCROSS APPLY OPENJSON(readings.POWReading) AS reading\nCROSS APPLY OPENJSON(reading.[value])\n    WITH (\n        ReadingDate varchar(50),\n        AF3THETA decimal(7,3) '$.AF3[0].THETA', \n        AF3ALPHA decimal(7,3) '$.AF3[0].ALPHA', AF3BETA_L decimal(7,3) '$.AF3[0].BETA_L', \n        AF3BETA_H decimal(7,3) '$.AF3[0].BETA_H', AF3GAMMA decimal(7,3) '$.AF3[0].GAMMA',\n        AF4THETA decimal(7,3) '$.AF4[0].THETA', \n        AF4ALPHA decimal(7,3) '$.AF4[0].ALPHA', AF4BETA_L decimal(7,3) '$.AF4[0].BETA_L', \n        AF4BETA_H decimal(7,3) '$.AF4[0].BETA_H', AF4GAMMA decimal(7,3) '$.AF4[0].GAMMA',\n        T7THETA decimal(7,3) '$.T7[0].THETA', \n        T7ALPHA decimal(7,3) '$.T7[0].ALPHA', T7BETA_L decimal(7,3) '$.T7[0].BETA_L', \n        T7BETA_H decimal(7,3) '$.T7[0].BETA_H', T7GAMMA decimal(7,3) '$.T7[0].GAMMA',\n        T8THETA decimal(7,3) '$.T8[0].THETA', \n        T8ALPHA decimal(7,3) '$.T8[0].ALPHA', T8BETA_L decimal(7,3) '$.T8[0].BETA_L', \n        T8BETA_H decimal(7,3) '$.T8[0].BETA_H', T8GAMMA decimal(7,3) '$.T8[0].GAMMA',\n        PzTHETA decimal(7,3) '$.Pz[0].THETA', \n        PzALPHA decimal(7,3) '$.Pz[0].ALPHA', PzBETA_L decimal(7,3) '$.Pz[0].BETA_L', \n        PzBETA_H decimal(7,3) '$.Pz[0].BETA_H', PzGAMMA decimal(7,3) '$.Pz[0].GAMMA'\n    ) AS brainwave\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ch05Ex09')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT DATABASEPROPERTYEX(DB_NAME(), 'Collation') AS Collation; --SQL_Latin1_General_CP1_CI_AS\n\nCREATE TABLE [dbo].[ENCODE] (\n    [ENCODE_ID] \tINT\t\tNOT NULL,\n    [ENCODE]\t\tVARCHAR (1)\tNOT NULL --represented as 1 byte in UTF-8\n)\nGO\nINSERT INTO [dbo].[ENCODE] ([ENCODE_ID], [ENCODE]) VALUES (1, '殽')\nINSERT INTO [dbo].[ENCODE] ([ENCODE_ID], [ENCODE]) VALUES (2, 'Ž')\nINSERT INTO [dbo].[ENCODE] ([ENCODE_ID], [ENCODE]) VALUES (3, 'ß')\nINSERT INTO [dbo].[ENCODE] ([ENCODE_ID], [ENCODE]) VALUES (4, '€')\nINSERT INTO [dbo].[ENCODE] ([ENCODE_ID], [ENCODE]) VALUES (5, '陽')\n\nSELECT * FROM [dbo].[ENCODE] ORDER BY [ENCODE_ID]\n\nCREATE TABLE [dbo].[ENCODEN] (\n    [ENCODE_ID] \tINT\t\tNOT NULL,\n    [ENCODE]\t\tNVARCHAR (1)\tNOT NULL --represented as 2 or more bytes in UTF-16\n)\nINSERT INTO [dbo].[ENCODEN] ([ENCODE_ID], [ENCODE]) VALUES (1, N'殽')\nINSERT INTO [dbo].[ENCODEN] ([ENCODE_ID], [ENCODE]) VALUES (2, 'Ž')\nINSERT INTO [dbo].[ENCODEN] ([ENCODE_ID], [ENCODE]) VALUES (3, 'ß')\nINSERT INTO [dbo].[ENCODEN] ([ENCODE_ID], [ENCODE]) VALUES (4, '€')\nINSERT INTO [dbo].[ENCODEN] ([ENCODE_ID], [ENCODE]) VALUES (5, N'陽')\n\nSELECT * FROM [dbo].[ENCODEN] ORDER BY [ENCODE_ID]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool",
						"poolName": "SQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ch05Ex11')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT COUNT(*) FROM brainwaves.FactREADING\n\nSELECT COUNT(*) AS distinct_row_count\nFROM (\n    SELECT DISTINCT *\n    FROM brainwaves.FactREADING\n) AS distinct_rows;\n\n--4539223\nSELECT COUNT(*)\nFROM brainwaves.FactREADING\nWHERE [VALUE] < 0.274 OR [VALUE] > 392\n--99278\n\nSELECT * INTO brainwaves.FactREADINGHighLow\nFROM brainwaves.FactREADING\nWHERE [VALUE] < 0.274 OR [VALUE] > 392  \nSELECT COUNT(*) FROM brainwaves.FactREADINGHighLow\n\n--99278\nDELETE FROM brainwaves.FactREADING WHERE [VALUE] < 0.274\nDELETE FROM brainwaves.FactREADING WHERE [VALUE] > 392\nSELECT COUNT(*) FROM brainwaves.FactREADING\n--4438073\n\n\nCREATE TABLE [brainwaves].[SCENARIO]\nWITH\n(\n  CLUSTERED COLUMNSTORE INDEX,\n  DISTRIBUTION = REPLICATE\n)\nAS\nSELECT DISTINCT SCENARIO,\n       AVG([VALUE]) OVER (partition by SCENARIO) as AVERAGE,\n       STDEV([VALUE]) OVER (partition by SCENARIO) as STANDARDDEV,\n       VAR([VALUE]) OVER (partition by SCENARIO) as VARIANCE,\n       PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by SCENARIO) as MEDIAN,\n       SQRT(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by SCENARIO)) AS SQUAREROOT,\n       SQUARE(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by SCENARIO)) AS SQUARED\nFROM brainwaves.FactREADING\nGO\nSELECT * FROM [brainwaves].[SCENARIO] ORDER BY SCENARIO\nGO\n\n\nCREATE TABLE [brainwaves].[ELECTRODE]\nWITH\n(\n  CLUSTERED COLUMNSTORE INDEX,\n  DISTRIBUTION = REPLICATE\n)\nAS\nSELECT DISTINCT ELECTRODE,\n       AVG([VALUE]) OVER (partition by ELECTRODE) as AVERAGE, \n       STDEV([VALUE]) OVER (partition by ELECTRODE) as STANDARDDEV,\n       VAR([VALUE]) OVER (partition by ELECTRODE) as VARIANCE,\n       PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by ELECTRODE) as MEDIAN,\n       SQRT(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by ELECTRODE)) AS SQUAREROOT,\n       SQUARE(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by ELECTRODE)) AS SQUARED\nFROM brainwaves.FactREADING\nGO\nSELECT * FROM [brainwaves].[ELECTRODE] ORDER BY ELECTRODE\nGO\n\n###\nCREATE TABLE [brainwaves].[FREQUENCY]\nWITH\n(\n  CLUSTERED COLUMNSTORE INDEX,\n  DISTRIBUTION = REPLICATE\n)\nAS\nSELECT DISTINCT FREQUENCY,\n       AVG([VALUE]) OVER (partition by FREQUENCY) as AVERAGE,\n       STDEV([VALUE]) OVER (partition by FREQUENCY) as STANDARDDEV,\n       VAR([VALUE]) OVER (partition by FREQUENCY) as VARIANCE,\n       PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by FREQUENCY) as MEDIAN,\n       SQRT(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by FREQUENCY)) AS SQUAREROOT,\n       SQUARE(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by FREQUENCY)) AS SQUARED\nFROM brainwaves.FactREADING\nGO\nSELECT * FROM [brainwaves].[FREQUENCY] ORDER BY FREQUENCY\nGO\n\n\n## \nCREATE TABLE [brainwaves].[SCENARIO_ELECTRODE]\nWITH\n(\n  CLUSTERED COLUMNSTORE INDEX,\n  DISTRIBUTION = REPLICATE\n)\nAS\nSELECT DISTINCT SCENARIO, ELECTRODE,\n       AVG([VALUE]) OVER (partition by SCENARIO, ELECTRODE) as AVERAGE, \n       STDEV([VALUE]) OVER (partition by SCENARIO, ELECTRODE) as STANDARDDEV,\n       VAR([VALUE]) OVER (partition by SCENARIO, ELECTRODE) as VARIANCE,\n       PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by SCENARIO, ELECTRODE) as MEDIAN,\n       SQRT(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by SCENARIO, ELECTRODE)) AS SQUAREROOT,\n       SQUARE(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by SCENARIO, ELECTRODE)) AS SQUARED\nFROM brainwaves.FactREADING\nGO\nSELECT * FROM [brainwaves].[SCENARIO_ELECTRODE] ORDER BY SCENARIO, ELECTRODE\nGO\n\n##\nCREATE TABLE [brainwaves].[SCENARIO_FREQUENCY]\nWITH\n(\n  CLUSTERED COLUMNSTORE INDEX,\n  DISTRIBUTION = REPLICATE\n)\nAS\nSELECT DISTINCT SCENARIO, FREQUENCY,\n       AVG([VALUE]) OVER (partition by SCENARIO, FREQUENCY) as AVERAGE,\n       STDEV([VALUE]) OVER (partition by SCENARIO, FREQUENCY) as STANDARDDEV,\n       VAR([VALUE]) OVER (partition by SCENARIO, FREQUENCY) as VARIANCE,\n       PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by SCENARIO, FREQUENCY) as MEDIAN,\n       SQRT(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by SCENARIO, FREQUENCY)) AS SQUAREROOT,\n       SQUARE(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by SCENARIO, FREQUENCY)) AS SQUARED\nFROM brainwaves.FactREADING\nGO\nSELECT * FROM [brainwaves].[SCENARIO_FREQUENCY] WHERE SCENARIO = 'TikTok' ORDER BY SCENARIO, FREQUENCY\nGO\n\n\n##\nCREATE TABLE [brainwaves].[SCENARIO_ELECTRODE_FREQUENCY]\nWITH\n(\n  CLUSTERED COLUMNSTORE INDEX,\n  DISTRIBUTION = REPLICATE\n)\nAS\nSELECT DISTINCT SCENARIO, ELECTRODE, FREQUENCY,\n       AVG([VALUE]) OVER (partition by SCENARIO, ELECTRODE, FREQUENCY) as AVERAGE,\n       STDEV([VALUE]) OVER (partition by SCENARIO, ELECTRODE, FREQUENCY) as STANDARDDEV,\n       VAR([VALUE]) OVER (partition by SCENARIO, ELECTRODE, FREQUENCY) as VARIANCE,\n       PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by SCENARIO, ELECTRODE, FREQUENCY) as MEDIAN,\n       SQRT(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by SCENARIO, ELECTRODE, FREQUENCY)) AS SQUAREROOT,\n       SQUARE(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [VALUE]) OVER (partition by SCENARIO, ELECTRODE, FREQUENCY)) AS SQUARED\nFROM brainwaves.FactREADING\nGO\nSELECT * FROM [brainwaves].[SCENARIO_ELECTRODE_FREQUENCY] ORDER BY SCENARIO, ELECTRODE, FREQUENCY\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool",
						"poolName": "SQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/uspCreateAndPopulateFactReading')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE PROCEDURE brainwaves.uspCreateAndPopulateFactReading\nAS \n    CREATE TABLE [brainwaves].[FactREADING]\n    WITH\n    (\n    CLUSTERED COLUMNSTORE INDEX,\n    DISTRIBUTION = HASH ([FREQUENCY])\n    )\n    AS\n    SELECT  se.SESSION_DATETIME, r.READING_DATETIME, \n            s.SCENARIO, e.ELECTRODE, f.FREQUENCY, r.[VALUE]\n    FROM    [brainwaves].[DimSESSION] se, [brainwaves].[TmpREADING] r, \n            [brainwaves].[DimSCENARIO] s, [brainwaves].[DimELECTRODE] e, \n            [brainwaves].[DimFREQUENCY] f\n    WHERE   r.SESSION_ID = se.SESSION_ID AND se.SCENARIO_ID = s.SCENARIO_ID \n            AND r.ELECTRODE_ID = e.ELECTRODE_ID AND r.FREQUENCY_ID = f.FREQUENCY_ID;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool",
						"poolName": "SQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ch05Ex03')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "3913bea5-974a-4c4f-9f92-083f759b0311"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/612492b7-fc72-4f78-a627-fccbfbbc32de/resourceGroups/csharpguitar/providers/Microsoft.Synapse/workspaces/azsynapseanalytics/bigDataPools/SparkPool",
						"name": "SparkPool",
						"type": "Spark",
						"endpoint": "https://azsynapseanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/in/2022/04/28/16/*.parquet', format='parquet')\r\n",
							"print(\"Total brainwave readings: \" + str(df.distinct().count()))\r\n",
							"#display(df.limit(10))\r\n",
							"df.createOrReplaceTempView(\"TmpREADING\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# LOAD MODE\r\n",
							"dfMODE = spark.read.load('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/Tables/MODE.csv', format='csv', header=True)\r\n",
							"#display(dfMODE.limit(10))\r\n",
							"dfMODE.createOrReplaceTempView(\"MODE\")\r\n",
							"#print(\"MODEs: \" + str(dfMODE.distinct().count()))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# LOAD ELECTRODE\r\n",
							"dfELECTRODE = spark.read.load('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/Tables/ELECTRODE.csv', format='csv', header=True)\r\n",
							"#display(dfELECTRODE.limit(10))\r\n",
							"dfELECTRODE.createOrReplaceTempView(\"ELECTRODE\")\r\n",
							"#print(\"ELECTRODEs: \" + str(dfELECTRODE.distinct().count()))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# LOAD FREQUENCY\r\n",
							"dfFREQUENCY = spark.read.load('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/Tables/FREQUENCY.csv', format='csv', header=True)\r\n",
							"#display(dfFREQUENCY.limit(10))\r\n",
							"dfFREQUENCY.createOrReplaceTempView(\"FREQUENCY\")\r\n",
							"#print(\"FREQUENCYs: \" + str(dfFREQUENCY.distinct().count()))"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# LOAD SCENARIO\r\n",
							"dfSCENARIO = spark.read.load('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/Tables/SCENARIO.csv', format='csv', header=True)\r\n",
							"#display(dfSCENARIO.limit(10))\r\n",
							"dfSCENARIO.createOrReplaceTempView(\"SCENARIO\")\r\n",
							"#print(\"SCENARIOs: \" + str(dfSCENARIO.distinct().count()))"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# LOAD SESSION\r\n",
							"dfSESSION = spark.read.load('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/Tables/SESSIONALL.csv', format='csv', header=True)\r\n",
							"#display(dfSESSION.limit(10))\r\n",
							"dfSESSION.createOrReplaceTempView(\"SESSION\")\r\n",
							"#print(\"SESSIONs: \" + str(dfSESSION.distinct().count()))"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dfREADING = sqlContext.sql(\"\"\"\r\n",
							"    SELECT  se.SESSION_DATETIME, r.READING_DATETIME, \r\n",
							"            s.SCENARIO, e.ELECTRODE, f.FREQUENCY, r.VALUE\r\n",
							"    FROM    SESSION se, TmpREADING r, SCENARIO s, \r\n",
							"            ELECTRODE e, FREQUENCY f\r\n",
							"    WHERE   r.SESSION_ID = se.SESSION_ID AND se.SCENARIO_ID = s.SCENARIO_ID \r\n",
							"            AND r.ELECTRODE_ID = e.ELECTRODE_ID AND r.FREQUENCY_ID = f.FREQUENCY_ID\r\n",
							"\"\"\")\r\n",
							"#print(\"READINGs: \" + str(dfREADING.distinct().count()))\r\n",
							"#display(dfREADING.limit(10))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"dfREADING.write.parquet('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/out/2022/04/28/17/BrainjammerBrainwavesSpark.parquet')\r\n",
							"#dfFactREADING = spark.read.load('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/out/2022/04/28/17/BrainjammerBrainwavesSpark.parquet', format='parquet')\r\n",
							"#print(\"Total brainwave readings: \" + str(dfFactREADING.distinct().count()))\r\n",
							"#display(dfFactREADING.limit(100))"
						],
						"outputs": [],
						"execution_count": 20
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ch05Ex05')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c389f6a8-06ef-4ef3-9172-02e5c6876812"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/612492b7-fc72-4f78-a627-fccbfbbc32de/resourceGroups/csharpguitar/providers/Microsoft.Synapse/workspaces/azsynapseanalytics/bigDataPools/SparkPool",
						"name": "SparkPool",
						"type": "Spark",
						"endpoint": "https://azsynapseanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/SessionCSV/BRAINWAVES_WITH_NULLS.csv',format='csv', header=True)\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.filter(df.SESSION_DATETIME.isNull() | df.READING_DATETIME.isNull() \\\r\n",
							"   | df.SCENARIO.isNull() | df.ELECTRODE.isNull() | df.FREQUENCY.isNull() \\\r\n",
							"   | df.VALUE.isNull()).show()\r\n",
							"print((df.count(), len(df.columns)))"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = df.na.drop(\"any\")\r\n",
							"print((df.count(), len(df.columns)))\r\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = df.filter(df.VALUE != '2X.n66').filter(df.VALUE != '4.c1..') \\\r\n",
							"     .filter(df.READING_DATETIME != '7/40/2021  12:41:00 PM')\r\n",
							"print((df.count(), len(df.columns)))"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = df.drop(df.SESSION_DATETIME, df. READING_DATETIME)\r\n",
							"print((df.count(), len(df.columns)))"
						],
						"outputs": [],
						"execution_count": 27
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ch05Ex08')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "96538873-e0b5-4d7a-b938-1463f38639d1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/612492b7-fc72-4f78-a627-fccbfbbc32de/resourceGroups/csharpguitar/providers/Microsoft.Synapse/workspaces/azsynapseanalytics/bigDataPools/SparkPool",
						"name": "SparkPool",
						"type": "Spark",
						"endpoint": "https://azsynapseanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"from pyspark.sql.functions import explode, col\r\n",
							"df = spark.read.option('multiline', 'true') \\\r\n",
							"  .json('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/SessionJson/PlayingGuitar/POW/csharpguitar-brainjammer-pow-0914.json')\r\n",
							"flatten = df.select('Session')\r\n",
							"flatten.show()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"flatten = df.select('Session', 'Session.Scenario','Session.POWReading.ReadingDate', 'Session.POWReading')\r\n",
							"flatten.show()"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"exploded = df.select(col('Session.Scenario').alias('SCENARIO'), explode('Session.POWReading').alias('READING'))\r\n",
							"exploded.printSchema()\r\n",
							"exploded.show(5)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"shredded = exploded.select('SCENARIO', \r\n",
							"    col('READING.AF3.THETA').alias('AF3THETA'), \r\n",
							"    col('READING.AF3.ALPHA').alias('AF3ALPHA'), col('READING.AF3.BETA_L').alias('AF3BETA_L'),\r\n",
							"    col('READING.AF3.BETA_H').alias('AF3BETA_H'), col('READING.AF3.GAMMA').alias('AF34GAMMA'),\r\n",
							"    col('READING.AF4.THETA').alias('AF4THETA'), \r\n",
							"    col('READING.AF4.ALPHA').alias('AF4ALPHA'), col('READING.AF4.BETA_L').alias('AF4BETA_L'),\r\n",
							"    col('READING.AF4.BETA_H').alias('AF4BETA_H'), col('READING.AF4.GAMMA').alias('AF4GAMMA'),\r\n",
							"    col('READING.T7.THETA').alias('T7THETA'), \r\n",
							"    col('READING.T7.ALPHA').alias('T7ALPHA'), col('READING.T7.BETA_L').alias('T7BETA_L'),\r\n",
							"    col('READING.T7.BETA_H').alias('T7BETA_H'), col('READING.T7.GAMMA').alias('T7GAMMA'),\r\n",
							"    col('READING.T8.THETA').alias('T8THETA'), \r\n",
							"    col('READING.T8.ALPHA').alias('T8ALPHA'), col('READING.T8.BETA_L').alias('T8BETA_L'),\r\n",
							"    col('READING.T8.BETA_H').alias('T8BETA_H'), col('READING.T8.GAMMA').alias('T8GAMMA'),\r\n",
							"    col('READING.Pz.THETA').alias('PzTHETA'), \r\n",
							"    col('READING.Pz.ALPHA').alias('PzALPHA'), col('READING.Pz.BETA_L').alias('PzBETA_L'),\r\n",
							"    col('READING.Pz.BETA_H').alias('PzBETA_H'), col('READING.Pz.GAMMA').alias('PzGAMMA'))\r\n",
							"#exploded.printSchema()\r\n",
							"shredded.show(5)"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ch05Ex10')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "86f905fc-da3c-490d-a573-4eef68cd6072"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/612492b7-fc72-4f78-a627-fccbfbbc32de/resourceGroups/csharpguitar/providers/Microsoft.Synapse/workspaces/azsynapseanalytics/bigDataPools/SparkPool",
						"name": "SparkPool",
						"type": "Spark",
						"endpoint": "https://azsynapseanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.ml.feature import MinMaxScaler\r\n",
							"from pyspark.ml.feature import VectorAssembler\r\n",
							"from pyspark.ml import Pipeline\r\n",
							"from pyspark.sql.functions import udf\r\n",
							"from pyspark.sql.types import DoubleType\r\n",
							"\r\n",
							"df = spark.createDataFrame([ ('TikTok', 'ALPHA',8.037698,28.50230489,812.381384,2.374,1.540779024,5.635876),\r\n",
							"                             ('TikTok', 'BETA_H',4.157344,15.90465452,252.9580353,1.387,1.177709642,1.923769),\r\n",
							"                             ('TikTok', 'BETA_L',5.616911,23.43532765,549.2145819,1.847,1.359043781,3.411409),\r\n",
							"                             ('TikTok', 'GAMMA',2.259732,8.469464627,71.73183106,0.898,0.947628619,0.806404),\r\n",
							"                             ('TikTok', 'THETA',18.7486,39.01921698,1522.499294,3.54,1.881488772,12.5316)], \r\n",
							"                             [\"SCENARIO\", \"FREQUENCY\",\"AVERAGE\",\"STANDARDDEV\", \"VARIANCE\", \"MEDIAN\", \"SQUAREROOT\", \"SQUARED\"])\r\n",
							"                            \r\n",
							"print(\"Before normalization :\")\r\n",
							"df.show()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"unlist = udf(lambda x: round(float(list(x)[0]),3), DoubleType())\r\n",
							"\r\n",
							"for b in [\"AVERAGE\",\"STANDARDDEV\", \"VARIANCE\", \"MEDIAN\", \"SQUAREROOT\", \"SQUARED\"]:\r\n",
							"    assembler = VectorAssembler(inputCols=[b],outputCol=b+\"_Vect\")\r\n",
							"    scaler = MinMaxScaler(inputCol=b+\"_Vect\", outputCol=b+\"_Scaled\")\r\n",
							"    pipeline = Pipeline(stages=[assembler, scaler])\r\n",
							"    df = pipeline.fit(df).transform(df).withColumn(b+\"_Scaled\", unlist(b+\"_Scaled\")).drop(b+\"_Vect\")\r\n",
							"\r\n",
							"print(\"After normalization :\")\r\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": 8
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ch05Ex13N')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "cb246f2e-f506-4408-b573-563dcfdd3970"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/612492b7-fc72-4f78-a627-fccbfbbc32de/resourceGroups/csharpguitar/providers/Microsoft.Synapse/workspaces/azsynapseanalytics/bigDataPools/SparkPool",
						"name": "SparkPool",
						"type": "Spark",
						"endpoint": "https://azsynapseanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\r\n",
							"val df = spark.read.sqlanalytics(\"SQLPool.brainwaves.SCENARIO_FREQUENCY\")\r\n",
							"df.createOrReplaceTempView(\"NormalizedBrainwavesSE\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"from pyspark.ml.feature import MinMaxScaler\r\n",
							"from pyspark.ml.feature import VectorAssembler\r\n",
							"from pyspark.ml import Pipeline\r\n",
							"from pyspark.sql.functions import udf\r\n",
							"from pyspark.sql.types import DoubleType\r\n",
							"\r\n",
							"df = spark.sql(\"SELECT * FROM NormalizedBrainwavesSE ORDER BY SCENARIO, FREQUENCY\")\r\n",
							"unlist = udf(lambda x: round(float(list(x)[0]),3), DoubleType())\r\n",
							"\r\n",
							"for b in [\"AVERAGE\",\"STANDARDDEV\", \"VARIANCE\", \"MEDIAN\", \"SQUAREROOT\", \"SQUARED\"]:\r\n",
							"    assembler = VectorAssembler(inputCols=[b],outputCol=b+\"_Vect\")\r\n",
							"    scaler = MinMaxScaler(inputCol=b+\"_Vect\", outputCol=b+\"_Scaled\")\r\n",
							"    pipeline = Pipeline(stages=[assembler, scaler])\r\n",
							"    df = pipeline.fit(df).transform(df).withColumn(b+\"_Scaled\", unlist(b+\"_Scaled\")).drop(b+\"_Vect\")\r\n",
							"df.show() \r\n",
							"df.write.mode(\"overwrite\").option(\"header\", \"true\").parquet(\"abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/in/2022/05/19/15/NormalizedBrainwavesSE.parquet\") \r\n",
							"df.write.mode(\"overwrite\").option(\"header\", \"true\").csv(\"abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/in/2022/05/19/15/NormalizedBrainwavesSE.csv\")"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ch05Ex13TB')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "76206d0d-76bc-4483-a4cc-091417b84a9d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/612492b7-fc72-4f78-a627-fccbfbbc32de/resourceGroups/csharpguitar/providers/Microsoft.Synapse/workspaces/azsynapseanalytics/bigDataPools/SparkPool",
						"name": "SparkPool",
						"type": "Spark",
						"endpoint": "https://azsynapseanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\r\n",
							"val df = spark.read.sqlanalytics(\"SQLPool.brainwaves.FactREADING\") \r\n",
							"df.write.mode(\"overwrite\").option(\"header\", \"true\").parquet(\"abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/in/2022/05/19/14/transformedBrainwavesV1.parquet\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ConvertToParquet')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0a62d8c5-35b6-4116-b12a-d05f7c7c3d5d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/612492b7-fc72-4f78-a627-fccbfbbc32de/resourceGroups/csharpguitar/providers/Microsoft.Synapse/workspaces/azsynapseanalytics/bigDataPools/SparkPool",
						"name": "SparkPool",
						"type": "Spark",
						"endpoint": "https://azsynapseanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/in/2022/04/10/10/ALL_SCENARIO_ELECTRODE_FREQUENCY_VALUE.csv', format='csv', header=True)\r\n",
							"display(df.limit(10))\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.write.mode(\"overwrite\").parquet('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/out/2022/04/10/11/ALL_SCENARIO_ELECTRODE_FREQUENCY_VALUE.parquet')"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/out/2022/04/10/11/ALL_SCENARIO_ELECTRODE_FREQUENCY_VALUE.parquet', format='parquet', header=True)\r\n",
							"print(df.count())"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"from pyspark.sql.functions import year, month, col\r\n",
							"df = spark.read.load('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/out/2022/04/10/11/ALL_SCENARIO_ELECTRODE_FREQUENCY_VALUE.parquet', format='parquet', header=True)\r\n",
							"df_year_month_day = (df.withColumn(\"year\", year(col(\"SESSION_DATETIME\")))) \\\r\n",
							"         .withColumn(\"month\", month(col(\"SESSION_DATETIME\")))\r\n",
							"display(df_year_month_day.limit(10))"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"from pyspark.sql.functions import year, month, col\r\n",
							"df_year_month_day.write.partitionBy(\"year\", \"month\") \\\r\n",
							"  .mode(\"overwrite\") \\\r\n",
							"  .parquet('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/raw-data/2022/04/10')"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/raw-data/2022/04/10/year=2021/month=7', format='parquet', header=True)\r\n",
							"print(df.count())\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HeaderUpdate')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "65998a0c-f0d1-482a-b62a-43d9c88e7c17"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/612492b7-fc72-4f78-a627-fccbfbbc32de/resourceGroups/csharpguitar/providers/Microsoft.Synapse/workspaces/azsynapseanalytics/bigDataPools/SparkPool",
						"name": "SparkPool",
						"type": "Spark",
						"endpoint": "https://azsynapseanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.option(\"header\",\"true\") \\\r\n",
							"  .csv('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/in/2022/04/01/18/*')\r\n",
							"display(df.limit(10))\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.option(\"header\",\"true\") \\\r\n",
							"  .csv('abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/in/2022/04/01/18/*')\r\n",
							"headers = spark.createDataFrame([(\"Timestamp\", \"Timestamp\"), \r\n",
							"  (\"AF3theta\", \"AF3/theta\"), (\"AF3alpha\", \"AF3/alpha\"), (\"AF3betaL\", \"AF3/betaL\"),\r\n",
							"  (\"AF3betaH\", \"AF3/betaH\"), (\"AF3gamma\", \"AF3/gamma\"), (\"T7theta\", \"T7/theta\"), \r\n",
							"  (\"T7alpha\", \"T7/alpha\"), (\"T7betaL\", \"T7/betaL\"), (\"T7betaH\", \"T7/betaH\"), \r\n",
							"  (\"T7gamma\", \"T7/gamma\"), (\"Pztheta\", \"Pz/theta\"), (\"Pzalpha\", \"Pz/alpha\"), \r\n",
							"  (\"PzbetaL\", \"Pz/betaL\"), (\"PzbetaH\", \"Pz/betaH\"), (\"Pzgamma\", \"Pz/gamma\"), \r\n",
							"  (\"T8theta\", \"T8/theta\"), (\"T8alpha\", \"T8/alpha\"), (\"T8betaL\", \"T8/betaL\"), \r\n",
							"  (\"T8betaH\", \"T8/betaH\"), (\"T8gamma\", \"T8/gamma\"), (\"AF4theta\", \"AF4/theta\"), \r\n",
							"  (\"AF4alpha\", \"AF4/alpha\"), (\"AF4betaL\", \"AF4/betaL\"), (\"AF4betaH\", \"AF4/betaH\"), \r\n",
							"  (\"AF4gamma\", \"AF4/gamma\")],['newHeader','oldHeader'])\r\n",
							"newHeaders = headers.select('newHeader').rdd.flatMap(lambda x: x).collect()\r\n",
							"dfh = df.toDF(*newHeaders)\r\n",
							"dfh.write.mode(\"overwrite\").parquet('/EMEA/brainjammer/out/2022/04/03/17/sampleBrainwaves.parquet')"
						],
						"outputs": [],
						"execution_count": 2
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 6,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"customLibraries": [
					{
						"name": "brainjammer-0.0.1-py3-none-any.whl",
						"path": "azsynapseanalytics/libraries/brainjammer-0.0.1-py3-none-any.whl",
						"containerName": "prep",
						"uploadedTimestamp": "0001-01-01T00:00:00+00:00",
						"type": "whl"
					}
				],
				"annotations": []
			},
			"dependsOn": [],
			"location": "swedencentral"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLPool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "swedencentral"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-custstgacct--azsynapseanalytics-csharpguitarpublic')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/612492b7-fc72-4f78-a627-fccbfbbc32de/resourceGroups/csharpguitar/providers/Microsoft.Storage/storageAccounts/csharpguitarpublic",
				"groupId": "dfs",
				"fqdns": [
					"csharpguitarpublic.dfs.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sql--azsynapseanalytics')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/612492b7-fc72-4f78-a627-fccbfbbc32de/resourceGroups/csharpguitar/providers/Microsoft.Synapse/workspaces/azsynapseanalytics",
				"groupId": "sql",
				"fqdns": [
					"azsynapseanalytics.e08b47b9-e4cc-44f0-8611-7e6939748af7.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sqlOnDemand--azsynapseanalytics')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/612492b7-fc72-4f78-a627-fccbfbbc32de/resourceGroups/csharpguitar/providers/Microsoft.Synapse/workspaces/azsynapseanalytics",
				"groupId": "sqlOnDemand",
				"fqdns": [
					"azsynapseanalytics-ondemand.e08b47b9-e4cc-44f0-8611-7e6939748af7.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}