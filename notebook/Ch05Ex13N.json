{
	"name": "Ch05Ex13N",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fc9f1c9e-b543-4e93-b46f-53d2197f2481"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/612492b7-fc72-4f78-a627-fccbfbbc32de/resourceGroups/csharpguitar/providers/Microsoft.Synapse/workspaces/azsynapseanalytics/bigDataPools/SparkPool",
				"name": "SparkPool",
				"type": "Spark",
				"endpoint": "https://azsynapseanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\r\n",
					"val df = spark.read.sqlanalytics(\"SQLPool.brainwaves.SCENARIO_FREQUENCY\")\r\n",
					"df.createOrReplaceTempView(\"NormalizedBrainwavesSE\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.ml.feature import MinMaxScaler\r\n",
					"from pyspark.ml.feature import VectorAssembler\r\n",
					"from pyspark.ml import Pipeline\r\n",
					"from pyspark.sql.functions import udf\r\n",
					"from pyspark.sql.types import DoubleType\r\n",
					"\r\n",
					"df = spark.sql(\"SELECT * FROM NormalizedBrainwavesSE ORDER BY SCENARIO, FREQUENCY\")\r\n",
					"unlist = udf(lambda x: round(float(list(x)[0]),3), DoubleType())\r\n",
					"\r\n",
					"for b in [\"AVERAGE\",\"STANDARDDEV\", \"VARIANCE\", \"MEDIAN\", \"SQUAREROOT\", \"SQUARED\"]:\r\n",
					"    assembler = VectorAssembler(inputCols=[b],outputCol=b+\"_Vect\")\r\n",
					"    scaler = MinMaxScaler(inputCol=b+\"_Vect\", outputCol=b+\"_Scaled\")\r\n",
					"    pipeline = Pipeline(stages=[assembler, scaler])\r\n",
					"    df = pipeline.fit(df).transform(df).withColumn(b+\"_Scaled\", unlist(b+\"_Scaled\")).drop(b+\"_Vect\")\r\n",
					"df.show() \r\n",
					"df.write.mode(\"overwrite\").option(\"header\", \"true\").parquet(\"abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/in/2022/05/19/15/NormalizedBrainwavesSE.parquet\") \r\n",
					"df.write.mode(\"overwrite\").option(\"header\", \"true\").csv(\"abfss://brainjammer@csharpguitarpublic.dfs.core.windows.net/EMEA/brainjammer/in/2022/05/19/15/NormalizedBrainwavesSE.csv\")"
				],
				"execution_count": 1
			}
		]
	}
}